{"version":3,"sources":["index.js"],"names":["concert_a_freq","concert_a_notenum","convert_to_frequency","notenum","from_concert_a","freq","Math","pow","calculate_note_number","name","octave","half_note","note_number","calculate_length","note_length","bpm","length_in_time","syntax_note","syntax_rest","syntax_track","syntax_param","syntax_type","token","test","undefined","parse_tokens","str","tokens","ast_list","split","node","match","Number","parseFloat","Error","push","split_into_tracks","tracks","type","Array","length","parse","make_player","ctx","AudioContext","suspend","player","track","track_panner","PannerNode","track_gain","GainNode","gain","value","osc_gain","osc","OscillatorNode","start","time","pitch","len","note_name","frequency","setValueAtTime","currentTime","positionX","connect","destination","play","context","resume","stop","close","play_button","mml","document","getElementById","e","innerText","stop_button","addEventListener"],"mappings":"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","file":"browser-mml-player.6c8b4797.js","sourceRoot":"..","sourcesContent":["////\n// Utilities\n\n// Frequency that cossresponds to concert A.\nconst concert_a_freq = 440;\n// MIDI note number that denotes concert A.\nconst concert_a_notenum = 69;\n\n// Converts MIDI note number to frequency in the equal temperament.\nconst convert_to_frequency = (notenum) => {\n  // calculate how high/low the `notenum` from concert A.\n  const from_concert_a = notenum - concert_a_notenum;\n  // calculate actual frequency.\n  // in the equal temperament, the smallest interval is `2^(1/12)`.\n  const freq = Math.pow(2, from_concert_a / 12) * concert_a_freq;\n  return freq;\n};\n\n// Calculate MIDI note number from note name, octave and half note.\nconst calculate_note_number = (name, octave, half_note) => {\n  let note_number = 0;\n  switch (name) {\n    case 'c': note_number = 60; break;\n    case 'd': note_number = 62; break;\n    case 'e': note_number = 64; break;\n    case 'f': note_number = 65; break;\n    case 'g': note_number = 67; break;\n    case 'a': note_number = 69; break;\n    case 'b': note_number = 71; break;\n  }\n  switch (half_note) {\n    case '+': note_number += 1; break;\n    case '-': note_number -= 1; break;\n    default: break;\n  }\n  note_number += (octave - 4) * 12;\n\n  return note_number;\n};\n\n// Calculate time from note length and bpm.\nconst calculate_length = (note_length, bpm) => {\n  let whole_note_length = bpm / 4;\n  let length_in_time = Math.pow(0.5, note_length - 1);\n  return length_in_time;\n};\n\n// syntactic elements\nconst syntax_note = /^([cdefgab])([0-9])([+-]?):([0-9]+)$/;\nconst syntax_rest = /^([r=]):([0-9]+)$/;\nconst syntax_track = /^---$/;\nconst syntax_param = /^@([^@=]+)=(-?[0-9]+(.[0-9]+)?)$/;\n\nconst syntax_type = (token) => {\n  if (syntax_note.test(token)) {\n    return 'note';\n  } else if (syntax_rest.test(token)) {\n    return 'rest';\n  } else if (syntax_track.test(token)) {\n    return 'track_separator';\n  } else if (syntax_param.test(token)) {\n    return 'param';\n  } else {\n    return undefined;\n  }\n};\n\n// Parse string and return an array of parsed tokens.\nconst parse_tokens = (str) => {\n  let tokens = str.split(/[ \\n]+/);\n  let ast_list = [];\n\n  for (token of tokens) {\n    let node = null;\n    let match = null;\n\n    switch (syntax_type(token)) {\n      case 'note':\n        match = token.match(syntax_note);\n        node = {\n          'type': 'note',\n          'note_name': match[1],\n          'octave': Number.parseFloat(match[2]),\n          'half_note': match[3],\n          'length': Number.parseFloat(match[4]),\n        };\n        break;\n\n      case 'rest':\n        match = token.match(syntax_rest);\n        node = {\n          'type': 'rest',\n          'note_name': match[1],\n          'length': Number.parseFloat(match[2]),\n        }\n        break;\n\n      case 'track_separator':\n        match = token.match(syntax_rest);\n        node = {\n          'type': 'track_separator',\n        }\n        break;\n\n      case 'param':\n        match = token.match(syntax_param);\n        node = {\n          'type': 'param',\n          'name': match[1],\n          'value': Number.parseFloat(match[2]),\n        }\n        break;\n\n      default:\n        throw Error(`unknown token '${token}'`);\n    }\n\n    ast_list.push(node);\n  }\n\n  return ast_list;\n};\n\n// Split tokens into arrays by track_separators.\nconst split_into_tracks = (tokens) => {\n  let tracks = [[]];\n\n  for (let token of tokens) {\n    if (token.type === 'track_separator') {\n      tracks.push(new Array());\n    } else {\n      tracks[tracks.length - 1].push(token);\n    }\n  }\n\n  return tracks;\n};\n\n////\n// MML Player API\n\n// Parse `str` and return a track array.\nconst parse = (str) => {\n  return split_into_tracks(parse_tokens(str));\n};\n\n// Create player object which has scheduled notes and events.\nconst make_player = (tracks) => {\n  let ctx = new AudioContext();\n  ctx.suspend();\n\n  let player = {\n    'context': ctx,\n    'bpm': 120,\n  };\n\n  for (let track of tracks) {\n    // These control pan and volume of this track.\n    let track_panner = new PannerNode(ctx);\n    let track_gain = new GainNode(ctx);\n    track_gain.gain.value = 0.3;\n    // `osc_gain` is for control note on/off by setting its volume.\n    let osc_gain = new GainNode(ctx);\n    let osc = new OscillatorNode(ctx);\n    osc.type = 'square';\n    osc.start();\n    osc_gain.gain.value = 0;\n\n    // Schedules note events and paramater changing events.\n    let time = 0;\n    let freq = 0;\n    let pitch = 0;\n    let len = 0;\n\n    for (let token of track) {\n      switch (token.type) {\n        case 'note':\n          let note_number = calculate_note_number(token.note_name, token.octave, token.half_note);\n          freq = pitch + convert_to_frequency(note_number);\n          len = calculate_length(token.length, player.bpm);\n\n          // Set osc sound on.\n          osc.frequency.setValueAtTime(freq, ctx.currentTime + time);\n          osc_gain.gain.setValueAtTime(1, ctx.currentTime + time);\n\n          // Set osc sound off.\n          time += len;\n          osc_gain.gain.setValueAtTime(0, ctx.currentTime + time);\n          break;\n\n        case 'rest':\n          len = calculate_length(token.length, player.bpm);\n\n          if (token.note_name == 'r') {\n            // Set osc sound off (rest note).\n            osc_gain.gain.setValueAtTime(0, ctx.currentTime + time);\n            time += len;\n\n          } else if (token.note_name == '=') {\n            // Set osc sound on with previously same frequency.\n            osc.frequency.setValueAtTime(freq, ctx.currentTime + time);\n            osc_gain.gain.setValueAtTime(1, ctx.currentTime + time);\n\n            // Set osc sound off.\n            time += len;\n            osc_gain.gain.setValueAtTime(0, ctx.currentTime + time);\n          }\n\n          break;\n\n        case 'param':\n          switch (token.name) {\n            case 'sys.bpm': player.bpm = token.value; break;\n            case 'pan':     track_panner.positionX.setValueAtTime(token.value, time); break;\n            case 'volume':  track_gain.gain.setValueAtTime(token.value, time); break;\n            case 'pitch': pitch = token.value; break;\n          }\n          break;\n      }\n    }\n\n    // Connect track nodes by serial.\n    osc.connect(osc_gain);\n    osc_gain.connect(track_panner);\n    track_panner.connect(track_gain);\n    track_gain.connect(ctx.destination);\n  }\n\n  return player;\n};\n\n// Start playing.\nconst play = (player) => {\n  player.context.resume();\n};\n\n// Stop playing.\nconst stop = (player) => {\n  player.context.close();\n};\n\n\n////\n// For HTML interface\n\nlet player = null;\nconst play_button = () => {\n  let mml = document.getElementById('mmlcode').value;\n\n  try {\n    player = make_player(parse(mml));\n    play(player);\n  } catch (e) {\n    document.getElementById('mmlconsole').innerText = e;\n  }\n}\n\nconst stop_button = () => {\n  if (player !== null) {\n    stop(player);\n  }\n}\n\n// Configure event handlers\ndocument.getElementById('mmlplay').addEventListener('click', play_button);\ndocument.getElementById('mmlstop').addEventListener('click', stop_button);\n"]}